@page "/profile"
@inject UserClient userClient


@attribute [Authorize]

  <div class="profile-container">
            <div class="profile-header">
                <div class="profile-avatar-wrapper">
                    <div class="profile-avatar">
						<img src="https://images.unsplash.com/photo-1640951613773-54706e06851d?q=80&w=100&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D" alt="User Avatar">
				<div class="avatar-overlay">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/><polyline points="17 8 12 3 7 8"/><line x1="12" y1="3" x2="12" y2="15"/></svg>
                            <span>Change Photo</span>
                        </div>
                    </div>
                </div>
                <h2>Edit Profile</h2>
                <p>Update your personal information</p>
            </div>

	<EditForm FormName="Update" Model="updateModel" OnValidSubmit="Submit" class="profile-form">
		                <DataAnnotationsValidator />

                <div class="form-group">
                    <label for="firstName">First Name</label>
                    <InputText @bind-Value="updateModel.FirstName" type="text" id="firstName" placeholder="Enter your first name"/>
			       

                </div>

                <div class="form-group">
                    <label for="lastName">Last Name</label>
					<InputText @bind-Value="updateModel.LastName" type="text" id="lastName"  placeholder="Enter your last name"/>
			        

                </div>

              @*   <div class="form-group">
                    <label for="email">Email</label>
                    <input type="email" id="email" value="@user.Email" placeholder="Enter your email" disabled/>

                    <span class="input-hint">Email cannot be changed</span>
                </div> *@


                <div class="form-group">
                    <label for="newPassword">New Password</label>
                    <div class="password-input">
                        <InputText @bind-Value="updateModel.PasswordHash" type="password" id="newPassword" placeholder="Enter new password"/>
					


                    </div>
                    <span class="input-hint">Must be at least 8 characters</span>
                </div>

                <div class="form-group">
                    <label for="confirmPassword">Confirm New Password</label>
                    <div class="password-input">
                        <InputText @bind-Value="updateModel.ConfirmPassword" type="password" id="confirmPassword" placeholder="Confirm new password"/>
						


                    </div>
                </div>

                <div class="form-actions">

                    @* <button type="button" class="cancel-btn">Cancel</button> *@

                    <button type="submit" class="save-btn">Save Changes</button>
                </div>
				<ValidationSummary />
            </EditForm>
        </div>



@code{

	[CascadingParameter]
	UserInfo user { get; set; } = new();

	[SupplyParameterFromForm]
	UpdateUserModel updateModel { get; set; } = new();

	[Parameter]
	public EventCallback<UserInfo> OnUserUpdated { get; set; }


    async Task Submit()
	{
		var result = await userClient.UpdateUserAsync(updateModel);
		if (result is not null)
		{
			user = result;
			await OnUserUpdated.InvokeAsync(user);

		}
		else
		{
			// show error message
		}

	}
	

}

					