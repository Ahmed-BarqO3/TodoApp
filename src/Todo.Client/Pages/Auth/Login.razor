@page "/login"
@inject NavigationManager  Navigation
@inject IAccountManagment AccountMangment



<div class="login-container">
	<div class="login-form">
		<h2 class="form-title">Welcome Back</h2>
		<p class="form-subtitle">Enter your credentials to continue your journey</p>



		<EditForm Model="loginModel" OnValidSubmit="Submit">
			<DataAnnotationsValidator />
			<div class="mb-4">
				<label for="email" class="form-label">EMAIL ADDRESS</label>

				<InputText @bind-Value="loginModel!.Email" class="form-control" id="email" name="email" placeholder="name@example.com"
				required />
				<ValidationMessage For="() => loginModel.Email" />
			</div>

			<div class="mb-4">
				<label for="password" class="form-label">PASSWORD</label>

				<InputText @bind-Value="loginModel!.Password" type="password" class="form-control" id="password" name="password"
				placeholder="Enter your password" required />
				<ValidationMessage For="() => loginModel.Password" class="text-danger" />
			</div>

			@if (Errors.Any())
			{
				<div class="alert-danger" style="color:#C70039">
					<ul>
						@foreach (var error in Errors)
						{
							<li>@error</li>
						}
					</ul>
				</div>
			}
			


			<div class="d-flex justify-content-between align-items-center mb-4">
				<div class="form-check">
					<input type="checkbox" class="form-check-input" id="rememberMe" name="rememberMe" />
					<label class="form-check-label" for="rememberMe">
						Remember me
					</label>
				</div>
				<a href="#" class="forgot-password">Forgot password?</a>
			</div>

		


			<button type="submit"  class="btn btn-primary w-100 mb-4">
				Sign In
			</button>


			<p class="text-center signup-text">
				Don't have an account?
				<NavLink href="/register" class="signup-link">Sign Up</NavLink>
			</p> 
		</EditForm>

	</div>
</div>










@code {
	[SupplyParameterFromForm]
	LoginModel? loginModel { get; set; }

	string[] Errors { get; set; } = [];
	bool loading;

	protected override void OnInitialized() => loginModel ??= new();

	private async Task Submit()
	{
		loading = true;
		var result = await AccountMangment.LoingAsync(loginModel!);

		if(result.Succeede)
		{
			Navigation.NavigateTo("/");
			Errors = [];
		}
		else
		{
			Errors = result.ErrorList;
		}
		loading = false;
	}
}

